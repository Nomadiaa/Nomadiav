generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  nom       String
  prenom    String
  email     String   @unique
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())

  bio            String?
  instagram      String?
  facebook       String?
  youtube        String?
  isPublic       Boolean @default(true)
  adventurerType String?
  isBanned       Boolean @default(false)

  // âž• CHAMPS IMAGES
  avatar     String? // ex: "user123.jpg"
  coverImage String? // ex: "cover_abc.jpg"

  voyages        Destination[]   @relation("VoyagesUtilisateur")
  checklists     Checklist[]
  reviews        Review[]
  reviewLikes    ReviewLike[]
  userVoyages    UserVoyage[]
  travelJournals TravelJournal[]

  notifications     Notification[] @relation("NotifRecipient") // Notifs reÃ§ues
  sentNotifications Notification[] @relation("NotifSender") // Notifs envoyÃ©es
}

enum Role {
  user
  admin
}

model Destination {
  id              String    @id @default(cuid())
  titre           String
  pays            String
  continent       String?
  description     String?
  imagePrincipale String?
  sections        Section[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // âž• Ajout de la relation inverse si tu veux associer une destination Ã  un utilisateur
  utilisateurId  Int? // optionnel si certains voyages ne sont pas liÃ©s
  utilisateur    User?           @relation("VoyagesUtilisateur", fields: [utilisateurId], references: [id])
  checklists     Checklist[]
  reviews        Review[]
  userVoyages    UserVoyage[]
  notifications  Notification[]
  travelJournals TravelJournal[]
}

model Section {
  id            String               @id @default(cuid())
  titre         String
  contenu       String?              @db.Text
  ordre         Int
  type          SectionType
  destinationId String
  bulletPoints  BulletPoint[]
  groupedPoints GroupedBulletPoint[]
  images        Image[]
  updatedAt     DateTime             @updatedAt
  destination   Destination          @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

enum SectionType {
  GUIDE
  PRESENTATION
  ACCES
  FORMALITES
  CONSEILS
  POURQUOI
}

model BulletPoint {
  id        String  @id @default(cuid())
  contenu   String?
  ordre     Int
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model GroupedBulletPoint {
  id        String  @id @default(cuid())
  titre     String
  ordre     Int
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  contents BulletPointContent[]
}

model BulletPointContent {
  id      String             @id @default(cuid())
  contenu String?
  ordre   Int
  groupId String
  group   GroupedBulletPoint @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Image {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

// Check-List 

model Checklist {
  id         String              @id @default(cuid())
  titre      String
  userId     Int // FK vers User (utilisateur)
  voyageId   String // FK vers Destination (voyage)
  categories ChecklistCategory[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  voyage Destination @relation(fields: [voyageId], references: [id], onDelete: Cascade)
}

model ChecklistCategory {
  id          String          @id @default(cuid())
  titre       String
  icone       String?
  checklistId String
  items       ChecklistItem[]

  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
}

model ChecklistItem {
  id             String            @id @default(cuid())
  titre          String
  description    String?
  isChecked      Boolean           @default(false)
  reminderDate   DateTime?
  reminderOffset Int? // ðŸ†• nombre de jours (ou heures) avant la date de rappel oÃ¹ envoyer la notif
  categoryId     String
  category       ChecklistCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  notifications  Notification[]
}

//Avis/ commentaires

model Review {
  id            String   @id @default(cuid())
  userId        Int
  destinationId String
  rating        Int // de 1 Ã  5 Ã©toiles
  content       String   @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  likes         ReviewLike[]
  notifications Notification[]
}

model ReviewLike {
  id       String @id @default(cuid())
  userId   Int
  reviewId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId]) // Un user ne peut liker qu'une fois un mÃªme review
}

model UserVoyage {
  id            Int         @id @default(autoincrement())
  userId        Int
  destinationId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, destinationId])
}

model Notification {
  id              Int      @id @default(autoincrement())
  type            String
  userId          Int
  fromUserId      Int? // <-- ce champ doit Ãªtre dÃ©fini AVANT la relation fromUser
  reviewId        String?
  destinationId   String?
  checklistItemId String?
  checklistId     String?
  createdAt       DateTime @default(now())
  isRead          Boolean  @default(false)

  user          User           @relation("NotifRecipient", fields: [userId], references: [id], onDelete: Cascade)
  fromUser      User?          @relation("NotifSender", fields: [fromUserId], references: [id], onDelete: Cascade)
  review        Review?        @relation(fields: [reviewId], references: [id])
  destination   Destination?   @relation(fields: [destinationId], references: [id])
  checklistItem ChecklistItem? @relation(fields: [checklistItemId], references: [id])
}

model TravelJournal {
  id            String @id @default(cuid())
  userId        Int
  destinationId String

  titre     String
  contenu   String?      @db.Text
  note      Int? // de 1 Ã  5
  dateDebut DateTime?
  dateFin   DateTime?
  isPublic  Boolean      @default(false)
  tags      JournalTag[]

  photos JournalPhoto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

model JournalPhoto {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  journalId String

  journal TravelJournal @relation(fields: [journalId], references: [id], onDelete: Cascade)
}

model JournalTag {
  id    String @id @default(cuid())
  label String

  journalId String
  journal   TravelJournal @relation(fields: [journalId], references: [id], onDelete: Cascade)
}
