generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  nom       String
  prenom    String
  email     String   @unique
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())

  bio            String?
  instagram      String?
  facebook       String?
  youtube        String?
  isPublic       Boolean @default(true)
  adventurerType String?

  // ➕ CHAMPS IMAGES
  avatar     String? // ex: "user123.jpg"
  coverImage String? // ex: "cover_abc.jpg"

  voyages     Destination[] @relation("VoyagesUtilisateur")
  checklists  Checklist[]
  reviews     Review[]
  reviewLikes ReviewLike[]
}

enum Role {
  user
  admin
}

model Destination {
  id              String    @id @default(cuid())
  titre           String
  pays            String
  continent       String?
  description     String?
  imagePrincipale String?
  sections        Section[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // ➕ Ajout de la relation inverse si tu veux associer une destination à un utilisateur
  utilisateurId Int? // optionnel si certains voyages ne sont pas liés
  utilisateur   User?       @relation("VoyagesUtilisateur", fields: [utilisateurId], references: [id])
  checklists    Checklist[]
  reviews       Review[]
}

model Section {
  id            String               @id @default(cuid())
  titre         String
  contenu       String?              @db.Text
  ordre         Int
  type          SectionType
  destinationId String
  bulletPoints  BulletPoint[]
  groupedPoints GroupedBulletPoint[]
  images        Image[]
  updatedAt     DateTime             @updatedAt
  destination   Destination          @relation(fields: [destinationId], references: [id])
}

enum SectionType {
  GUIDE
  PRESENTATION
  ACCES
  FORMALITES
  CONSEILS
  POURQUOI
}

model BulletPoint {
  id        String  @id @default(cuid())
  contenu   String?
  ordre     Int
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])
}

model GroupedBulletPoint {
  id        String               @id @default(cuid())
  titre     String
  ordre     Int
  sectionId String
  section   Section              @relation(fields: [sectionId], references: [id])
  contents  BulletPointContent[]
}

model BulletPointContent {
  id      String             @id @default(cuid())
  contenu String?
  ordre   Int
  groupId String
  group   GroupedBulletPoint @relation(fields: [groupId], references: [id])
}

model Image {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])
}

// Check-List 

model Checklist {
  id         String              @id @default(cuid())
  titre      String
  userId     Int // FK vers User (utilisateur)
  voyageId   String // FK vers Destination (voyage)
  categories ChecklistCategory[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  user   User        @relation(fields: [userId], references: [id])
  voyage Destination @relation(fields: [voyageId], references: [id], onDelete: Cascade)
}

model ChecklistCategory {
  id          String          @id @default(cuid())
  titre       String
  icone       String?
  checklistId String
  items       ChecklistItem[]

  checklist Checklist @relation(fields: [checklistId], references: [id])
}

model ChecklistItem {
  id           String    @id @default(cuid())
  titre        String
  description  String?
  isChecked    Boolean   @default(false)
  reminderDate DateTime?
  categoryId   String

  category ChecklistCategory @relation(fields: [categoryId], references: [id])
}

//Avis/ commentaires

model Review {
  id            String   @id @default(cuid())
  userId        Int
  destinationId String
  rating        Int // de 1 à 5 étoiles
  content       String   @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  destination Destination  @relation(fields: [destinationId], references: [id])
  likes       ReviewLike[]
}

model ReviewLike {
  id       String @id @default(cuid())
  userId   Int
  reviewId String

  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId]) // Un user ne peut liker qu'une fois un même review
}
